generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Tweet {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    img       String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.ObjectId
    replies   Reply[]
    likes     Like[]
}

model Like {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    userId  String @db.ObjectId
    tweetId String @db.ObjectId
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Reply {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    createdAt DateTime @default(now())
    userId    String   @db.ObjectId
    tweetId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?  @unique
    email     String?  @unique
    image     String?
    bannerImg String?
    hash      String
    createdAt DateTime @default(now())

    tweets        Tweet[]
    likes         Like[]
    followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
    followedByIDs String[] @db.ObjectId
    following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
    followingIDs  String[] @db.ObjectId
    replies       Reply[]
}
